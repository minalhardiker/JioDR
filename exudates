import numpy as np
import cv2 as cv2
from matplotlib import pyplot as plt

#read image
image = cv2.imread('test3.jpg', cv2.IMREAD_UNCHANGED)
print(image.shape)
#Resizing the image 
scale_percent = 20
width = int(image.shape[1] * scale_percent / 100)
height = int(image.shape[0] * scale_percent / 100)
dim = (width, height)
  
# resize image
src = cv2.resize(image, dim, interpolation = cv2.INTER_AREA)
 
cv2.imshow('image',src)
cv2.waitKey()
# cv2.destroyAllWindows()

#Extracting green channel
src[:,:,0] = 0
src[:,:,2] = 0
green_channel = src

# #show image
cv2.imshow('green_img',green_channel)
cv2.waitKey()
# cv2.destroyAllWindows()

import cv2 as cv
events = [i for i in dir(cv) if 'EVENT' in i]
print( events )

def Capture_Event(event, x, y, flags, params):
	# If the left mouse button is pressed
	if event == cv2.EVENT_LBUTTONDOWN:
		# Print the coordinate of the 
		# clicked point
		print(f"({x}, {y})")


# The Main Function
if __name__=="__main__":
	# Show the Image
	cv2.imshow('green_img',green_channel)
	# Set the Mouse Callback function, and call
	# the Capture_Event function.
	cv2.setMouseCallback('green_img', Capture_Event)
	# Press any key to exit
	cv2.waitKey(0)
	# Destroy all the windows
	cv2.destroyAllWindows()


mask = np.zeros(green_channel.shape[:2], dtype="uint8")
cv2.circle(mask, (334, 233), 40, 125, -1)
masked = cv2.bitwise_and(green_channel, green_channel, mask=mask)
# show the output images
#cv2.imshow("Circular Mask", mask)
# cv2.imshow("Mask Applied to Image", masked)
cv2.waitKey(0)



# subtract the images
sub = cv2.subtract( green_channel, masked)
  
# TO show the output
# cv2.imshow('image', sub)
  
# To close the window
cv2.waitKey(0)
# cv2.destroyAllWindows()

# Taking a matrix of size 5 as the kernel
kernel = np.ones((5, 5), np.uint8)


# The first parameter is the original image,
# kernel is the matrix with which image is
# convolved and third parameter is the number
# of iterations, which will determine how much
# you want to erode/dilate a given image.
img_dilation = cv2.dilate(sub, kernel, iterations=1)
  
cv2.imshow('Input', sub)

cv2.imshow('Dilation', img_dilation)
  
cv2.waitKey(0)

#Threshold Processing
img_dilation = cv2.cvtColor(img_dilation,cv2.COLOR_BGR2GRAY)
cv2.imshow("img_gray",img_dilation)
cv2.waitKey(0)

print(img_dilation.min(),img_dilation.max())
print(list(img_dilation.flatten()))
ret, bin_img = cv2.threshold(img_dilation,
                             130,255, 
                             cv2.THRESH_BINARY)
# # the window showing output image         
# # with the corresponding thresholding         
# # techniques applied to the input image    
cv2.imshow('Otsu Threshold', bin_img)   
cv2.imshow('image',src)
# cv2.destroyAllWindows()      
       
# De-allocate any associated memory usage         
cv2.waitKey(0)

img_erosion = cv2.erode(bin_img, kernel, iterations=1)
cv2.imshow('Final image', img_erosion)
cv2.waitKey(0)

cv2.destroyAllWindows() 


